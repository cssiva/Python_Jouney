Python Foundations for AI/ML/GenAI - Day 1

Understanding Python Variables & Data Types

🚀 A Beginner-Friendly Guide with AI/ML Use Cases

📌 What Are Variables?

A variable is like a labeled storage box where we store data. It helps us save values and use them later in a program.

🔹 In Python, you don’t need to declare the type of a variable. It automatically detects the data type.

📌 Example:

# Storing a model name in a variable
model_name = "GPT-4"  # String (Text Data)
accuracy = 98.5        # Float (Decimal Number)
epochs = 10            # Integer (Whole Number)
is_trained = True      # Boolean (True/False)

📌 Python Data Types with AI/ML Examples

Python supports different data types. Below are the most useful ones in AI/ML/GenAI development:

Data Type

Example

Use Case in AI/ML

Integer (int)

epochs = 10

Number of training cycles

Float (float)

accuracy = 95.7

Model accuracy, loss values

String (str)

model_name = "GPT-4"

Storing text-based data

Boolean (bool)

is_trained = True

Checking model status

List (list)

models = ["GPT-3", "BERT"]

Storing multiple models

Tuple (tuple)

version = (1, 0, 5)

Fixed configuration values

Dictionary (dict)

metrics = {"accuracy": 98.5, "loss": 0.05}

Storing structured data

Set (set)

labels = {"AI", "ML"}

Unique categories

📌 Example Usage in AI/ML:

# Dictionary to store AI model details
ai_model = {
    "name": "GPT-4",
    "accuracy": 98.5,
    "training_time": 12.5,  # Hours
    "parameters": 175_000_000_000,  # 175 Billion Parameters
    "framework": "PyTorch"
}

print(f"AI Model: {ai_model['name']}, Framework: {ai_model['framework']}")
print(f"Trained with {ai_model['parameters']} parameters, Accuracy: {ai_model['accuracy']}%")

📌 Real-World AI/ML Example

Let’s say we have multiple AI models. We can use lists and dictionaries to store and compare their accuracy:

# List of AI models with their details
models = [
    {"name": "GPT-3", "accuracy": 94.0, "parameters": 175_000_000_000},
    {"name": "BERT", "accuracy": 92.5, "parameters": 340_000_000},
    {"name": "T5", "accuracy": 90.1, "parameters": 11_000_000}
]

# Finding the most accurate model
best_model = max(models, key=lambda x: x["accuracy"])
print(f"Best Performing Model: {best_model['name']} with {best_model['accuracy']}% accuracy")

📌 Critical Thinking & Connecting the Dots

🤔 Questions to Think About:

1️⃣ Why is accuracy stored as a float instead of an integer?
→ Because accuracy often has decimal precision (e.g., 95.78%).

2️⃣ What if we used a list instead of a dictionary for model details?
→ Accessing specific properties (like accuracy) would be harder.

3️⃣ How can we store 1000+ models efficiently?
→ Use a database (SQL or NoSQL) instead of lists/dictionaries.

🎯 Your Challenge

🔹 Modify the model dictionary to include dataset name and total training hours.🔹 Find the model that took the longest time to train.

📌 What’s Next?

🚀 Day 2: Control Flow (if-else, loops) in Python for AI/ML

📢 Stay consistent! Learning 1% every day makes a huge impact over time!

📌 Follow for more updates

